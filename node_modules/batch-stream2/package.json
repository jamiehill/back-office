{
  "name": "batch-stream2",
  "version": "0.1.3",
  "description": "Transform a stream into batches, with custom async operation before emitting data",
  "dependencies": {
    "readable-stream": "~1.0.2"
  },
  "devDependencies": {
    "after": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/segmentio/batch-stream.git"
  },
  "keywords": [
    "batch",
    "stream",
    "chunks",
    "chunked"
  ],
  "author": {
    "name": "Segment.io",
    "email": "friends@segment.io"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/segmentio/batch-stream/issues"
  },
  "readme": "Batch Stream\n============\n\nTransform stream which batches a bunch of input data into groups of specified size.\nWill emit arrays, so that you can deal with pieces of input asynchronously.\n\n## Usage\n\n```javascript\n\nvar batch = new BatchStream({\n  size : 100,     // the size for each chunk\n  timeout: 5000   // emit data after this amount of milliseconds\n                  // even if the size of buffered writes not reaching `size`\n});\n\nstream\n  .pipe(batch)\n  .pipe(new ArrayStream()); // deals with array input from pipe.\n\n```\n\nThis is also usefull when you want transform continuous writes into batches:\n\nSuppose you have a `docs` stream, instead of:\n\n```javascript\ndocs.on('data', function(doc) {\n  db.insert(doc)\n})\n```\n\nYou can:\n\n```javascript\nvar batch = new BatchStream({\n  transform: function(items, callback) {\n    db.bulkInsert(items, callback)\n  })\n})\n\ndocs.pipe(batch)\n.on('finish', function() {\n  console.log('All doc inserted.')\n})\n```\n\nNote that by passing a `options.transform` to the constructor, instead of\nlistening on `data` events, the insertions are ensured to be sequential.\n\nIf insertions are allowed to happen parrallelly:\n\n```javascript\nvar batch = new BatchStream()\n\ndocs.pipe(batch)\n.on('data', function(items) {\n  db.bulkInsert(items, ...)\n})\n.on('finish', function() {\n  console.log('All docs queued for insertion.')\n})\n```\n\n## License\n\nthe MIT license.\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/segmentio/batch-stream",
  "_id": "batch-stream2@0.1.3",
  "dist": {
    "shasum": "94cebc07aea5d33214a62e3099731066bf3de644"
  },
  "_from": "batch-stream2@",
  "_resolved": "https://registry.npmjs.org/batch-stream2/-/batch-stream2-0.1.3.tgz"
}
