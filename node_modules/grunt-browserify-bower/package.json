{
  "name": "grunt-browserify-bower",
  "description": "Browserify bower libraries into a separate bundle",
  "version": "0.1.4",
  "homepage": "https://github.com/tobiash/grunt-browserify-bower",
  "author": {
    "name": "Tobias Habermann",
    "email": "thabermann@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tobiash/grunt-browserify-bower.git"
  },
  "bugs": {
    "url": "https://github.com/tobiash/grunt-browserify-bower/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tobiash/grunt-browserify-bower/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1",
    "nodeunit": "~0.8.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "bower-resolve": "0.0.3",
    "bower": "~1.2.7",
    "browserify": "~2.35.1",
    "browserify-shim": "~2.0.8",
    "extend": "~1.2.1"
  },
  "readme": "# grunt-browserify-bower\n\n> Browserify bower libraries into a separate bundle. Can be used\n> together with grunt-browserify to externalize libraries into a\n> separate file and speed up bundling of your application.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-browserify-bower --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-browserify-bower');\n```\n\n## The \"browserifyBower\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `browserifyBower` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  browserifyBower: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\nThe task browserifies all installed bower packages and optionally uses\n`browserify-shim` to shim non CommonJS libraries. All these libraries\nare browserified into a separate 'libs' bundle for your web app. The\ntask automatically sets `grunt-browserify`'s `options.external` setting.\n\n#### Why should you use this?\n\n* Your main browserify task runs a lot faster when it doesn't have to\nrepackage large library files like JQuery and AngularJS each time. This\nmakes your development cycle a lot more responsive.\n* Libraries are a lot easier to integrate in your project. For most\nlibraries it's as simple as `bower install foo` and `require(foo)` in\nyour application.\n\n### Options\n\n#### options.file\nType: `String`\nDefault value: `'./.tmp/scripts/lib.js'`\n\nPath of the destination file.\n\n#### options.forceResolve\nType: `Object`\nDefault value: `{}`\n\nThis object allows to adjust the path to the `main` file of a bower\npackage, in case the one specified in the package's `bower.json` is\nfaulty. The path should be relative to the package directory.\n\nExample:\n```js\nforceResolve: {\n  'wysihtml5': 'dist/wysihtml5-0.3.0.min.js'\n}\n```\n\n#### options.shim\nType: `Object`\nDefault value: `{}`\n\nThis object allows adjusting the options passed to `browserify-shim`.\n\nYou can add entries for every library installed via bower. For these,\nyou should omit the `path` setting, as this is automatically determined\nvia `bower-resolve` or the `forceResolve` option.\n\nNote that the `exports` setting defaults to `null` and needs to be\nadjusted if you want to shim a non CommonJS library that exports to\nthe `window` object.\n\nYou can also add entries for libraries not installed via bower. These\nare passed to `browserify-shim` directly and you need to specify a\n`path` in this case.\n\n### Usage Examples\n```js\ngrunt.initConfig({\n  browserifyBower: {\n    options: {\n      file: './tmp/lib.js',\n      // fix broken bower `main` entries\n      forceResolve: {\n        'wysihtml5': 'dist/wysihtml5-0.3.0.min.js'\n      },\n      shim: {\n        'wysihtml5': {\n          exports: 'wysihtml5'\n        }\n      }\n    }\n  }\n})\n```\n\n### Usage with `grunt-watch` or `grunt-este-watch`\n\nIf you want to rebundle your application every time one of your `.js`\nfiles changes, but not rebuild your library bundle, you can run the task\nwith the `nowrite` flag. This sets the `browserify.exports` setting\naccording to your installed bower libs, but suppresses the rebundling of\nyour library bundle.\n\nExample (with `grunt-watch`):\n```js\ngrunt.initConfig({\n  watch: {\n      browserify: {\n        files: 'app/scripts/**/*.js',\n        tasks: ['browserifyBower:libs:nowrite', 'browserify:app']\n      }\n  }\n})\n```\n\n#### Default Options\n\n```js\ngrunt.initConfig({\n  browserifyBower: {\n    options: {\n      file: './.tmp/scripts/lib.js',\n      forceResolve: {},\n      shim: {}\n    }\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\nSee `CHANGELOG.md`\n",
  "readmeFilename": "README.md",
  "_id": "grunt-browserify-bower@0.1.4",
  "dist": {
    "shasum": "c8d171ce7a50c4a510600c2a6965b8b238d780d6"
  },
  "_from": "grunt-browserify-bower@^0.1.4",
  "_resolved": "https://registry.npmjs.org/grunt-browserify-bower/-/grunt-browserify-bower-0.1.4.tgz"
}
